# Why use DOCKER:- Docker helps to ease installation of softwares , applications (without worrying about setup and dependencies). not only on your PC but on web server or cloud based platform.
# docker run -it redis :- an instance of redis up and run on my computer 
# What is DOCKER:- It is a platform or ecosystem around creating and running containers.
# DOCKER ecosystem :- Docker Client, Docker Server, Docker Machine, Docker Images, Docker Hub, Docker Compose.
# Containers?:- 
When running the command like:- docker run -it redis (When running this command the Dokcer CLI reached out to Docker Hub and downloaded a single file called an "image" # Image :- An image is a single file that containing all dependencies and all configurations to run a very specific program For e.g Reddis, Jupiter
This single file is stored on your hardrive and we can use this image to create a container . # Container :- Container is an instance of an image , like a running program , So we can say Container is a program with its own isolated set of hardware resources .
a "container" is really a process or a set of processes that have a grouping of resourcesspecifically assigned to it.
# DOCKER CLI (client):- a tool that is used to issue commands 
# DOCKER SERVER/ DOCKER Daemon :- a tool that is responsible for creating images, running containers etc. 
# The wsl command in Windows is used to interact with the Windows Subsystem for Linux (WSL).

# Let docker run hello-world :- This commands starts the "Docker CLI" which is in charge of taking commands and do a little bit processing and then communicating the commands to "Docker server" which is really in charge of heavy lifting . 
So "docker run hello-world" means that we want to start up a new container using the image with name of hello-world , the hello-world image has a tiny little program inside of it . "DOCKER server" saw that we are trying to up a new container using an image called hello world , The first thing that DOCKER server did was to check to see if it already had a local copy of the hello world image or that hello world file , So Docker server look into image cache , If Image Cache is empty as we just dowload docker , so Docker server will reach out to a free service called Docker Hub, The Docker Hub is a repository of free public images so you can freely download and run on your personal computer.So, Docker server reached out to Docker Hub and said,"Hey, I'm looking for an image called hello world.Do you have one?"Of course, the Docker hub does.So, Docker server downloaded this hello world file and stored it on your personal computer in this ImageCache where it can now be reran at some point in the future very quickly without having to re-download it from the Docker Hub.After that, the Docker server then said,"Okay, great. I've got this image and now, it's time to use it to create an instance of a container."So, the Docker server then essentially took that single file,loaded it up into memory,created a container out of it,and then ran a single program inside of it.

# Namespacing:- Isolating resources per process(or grp of process)
# Control grps (cgrps):- Limit amount of resources used per process
So, namespacing is for saying,"Hey, this area of the hard drive is for this process."A control group can be used to limit the amount of memory that a process can use, the amount of CPU,the amount of hard drive input, output.
So, these two features put together can be used to really kind of isolate a single process and limit the amount of resources it can talk to,and the amount of bandwidth essentially,that it can make use of.
a "container" is really a process or a set of processes that have a grouping of resourcesspecifically assigned to it.

So namespacing , control groups belong to Linux, not to Windows, not to macOS. So that might make you kind of question or wonder how are you running Docker right now? You know, we are running a Docker client and we are running Docker containers on a macOS or a Windows operating system. How is that happening if these are Linux-specific features? Well, here's what's happening behind the scenes. When you installed Docker for Windows or Docker for Mac just a moment ago in the last couple sections, you installed a Linux virtual machine. So, so long as Docker up here is running, you technically have a Linux virtual machine running on your computer. Inside of this virtual machine is where all of these containers are going to be created. So inside the virtual machine, we have a Linux kernel, and that Linux kernel is going to be hosting, running processes inside of containers. And it's that Linux kernel that's going to be in charge of limiting access or kind of constraining access or isolating access to different hardware resources on your computer.